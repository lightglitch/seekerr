logger:
  level: info # panic,fatal,error,warn,info,debug,trace
  timeFormat: "" # golang time format
  color: true # active color on console
  human: true # store log as human readable
  file: "var/log/seekerr.%Y%m%d.log" # %Y%m%d is used for rotation. leave empty to disable file log

#  A cron expression represents a set of times, using 5 space-separated fields.
#  Field name   | Mandatory? | Allowed values  | Allowed special characters
#  ----------   | ---------- | --------------  | --------------------------
#  Minutes      | Yes        | 0-59            | * / , -
#  Hours        | Yes        | 0-23            | * / , -
#  Day of month | Yes        | 1-31            | * / , - ?
#  Month        | Yes        | 1-12 or JAN-DEC | * / , -
#  Day of week  | Yes        | 0-6 or SUN-SAT  | * / , - ?

cron: "0 */2 * * *"

services:
  resty:
    debug: false
    timeout: 20s #golang duration
    retry: 0 # zero for no retries
    retryWaitTime: 1s
    retryMaxWaitTime: 10s

  trakt:
    apiKey: ""

  omdb:
    apiKey: ""

  guessIt:
    type: "command" # command or webservice
    path: "guessit"
    # url: "http://192.168.1.100:5000/"

  radarr:
    url: "http://192.168.1.100:7878/"
    apiKey: ""
    rootFolder: "/movies/"
    quality: "Bluray"
    minimumAvailability: "inCinemas"
    monitored: true
    searchForMovie: false

notifications:
  gotify:
    webhook: "http://192.168.1.100:8070/message?token=XXXX"
    events: ["ADDED_MOVIE","REVISION_MOVIE","FINISH_ALL_FEEDS"] # START_FEED, FINISH_FEED, FINISH_ALL_FEEDS, ADDED_MOVIE, leave empty for all

  slack:
    webhook: "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
    events: ["ADDED_MOVIE","REVISION_MOVIE","FINISH_ALL_FEEDS"] # START_FEED, FINISH_FEED, FINISH_ALL_FEEDS, ADDED_MOVIE, leave empty for all

importer:
  revision: false
  filter:
    limit: 100 # limit the movies to process on each list
    exclude:
      - 'CountRatings < 2 || Runtime < 20 || ImdbVotes < 1000 || Year > Now().Year()'
      - 'Ratings.Imdb != 0 && Ratings.Imdb < 7'
      - 'Ratings.Metacritic != 0 && Ratings.Metacritic < 70'
      - 'Ratings.RottenTomatoes != 0 && Ratings.RottenTomatoes < 75'
    revision:
      - 'CountRatings < 2 || Runtime < 20 || ImdbVotes < 1000 || Year > Now().Year()'
      - 'Ratings.Imdb != 0 && Ratings.Imdb < 6.5'
      - 'Ratings.Metacritic != 0 && Ratings.Metacritic < 60'
      - 'Ratings.RottenTomatoes != 0 && Ratings.RottenTomatoes < 65'

  lists:
    # name_of_list:
    #   # The type of the feed, support 3 types
    #   type: rss | trakt | imdb
    #   # special urls for trakt type trakt://movies/trending, trakt://movies/popular, trakt://movies/anticipated, trakt://movies/boxoffice
    #   url: ""
    #   guessIt: true # only for rss and if it's necessary to parse the title to get the correct movie name or year
    #
    #   # you can override the global filters for a specific feed
    #   filter:
    #
    rarbg:
      type: "rss" # rss | trakt | imdb
      url: "https://rarbgprx.org/rssdd_magnet.php?category=44"
      guessIt: true

    imdb:
      type: "imdb" # rss | trakt | imdb
      url: "https://www.imdb.com/list/ls016522954/?sort=list_order,asc&st_dt=&mode=detail&page=1&title_type=movie&user_rating=6.0%2C&ref_=ttls_ref_rt_usr"

    traktTrending:
      type: "trakt" # rss | trakt | imdb
      # special urls trakt://movies/trending, trakt://movies/popular, trakt://movies/anticipated, trakt://movies/boxoffice
      url: "trakt://movies/trending"

    traktPublic:
      type: "trakt" # rss | trakt | imdb
      url: "https://trakt.tv/users/movistapp/lists/now-playing?sort=rank,asc"



